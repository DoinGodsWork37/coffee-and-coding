print(pokemon_hp)
#select by dropping columns
select(
pokemon,  # data frame first
-hit_points, -combat_power, -fast_attack, -weight_bin  # columns to drop
)
#select columns with similar names
select(pokemon, starts_with("weight"))
select(pokemon, contains("bin"))
?contains
?&&
dplyr::filter(pokemon, species == "jigglypuff")
dplyr::filter(pokemon, species == "jigglypuff")
#filter on three species
dplyr::filter(
pokemon,
species %in% c("staryu", "psyduck", "charmander")
)
?filter
#read in data
?readr::read_csv
?glimpse
?glimpse
#data inspection
tibble::glimpse(pokemon)
#summary {base} stats
base::summary(pokemon)
?print
#filter on three species
dplyr::filter(
pokemon,
species %in% c("staryu", "psyduck", "charmander")
)
#dplyr::mutate
# we're going to subset by columns first
pokemon_power_hp <- select(  # create new object by subsetting our data set
pokemon,  # data
species, combat_power, hit_points  # columns to keep
)
# now to mutate with some extra information
mutate(
pokemon_power_hp,  # our new, subsetted data frame
power_index = combat_power * hit_points,  # new column from old ones
caught = 1,  # new column will fill entirely with number
area = "kanto"  # will fill entirely with this text
)
# So we have a column caught filled for every row with 1 and and a
# column filled with  kanto for every row. R ‘recycles’ whatever you
# put there for each row. For example, if you gave the argument a
# vector of three numbers, e.g. caught = c(1:3), then the row 1 would
# get 1, row 2 would get 2, row 3 would get 3 and it would cycle back
# to 1 for row 4, and so on.
#
# You can mutate a little more easily with an if_else() statement:
dplyr::mutate(
pokemon_hp,
common = if_else(
condition = species %in% c(  # if this condition is met...
"pidgey", "rattata", "drowzee",
"spearow", "magikarp", "weedle",
"staryu", "psyduck", "eevee"
),
true = "yes",  # ...fill column with this string
false = "no"  # ...otherwise fill it with this string
)
)
dplyr::mutate(
pokemon_hp,  # data
common = case_when(
species %in% c("pidgey", "rattata", "drowzee") ~ "very_common",
species == "spearow" ~ "pretty_common",
species %in% c("magikarp", "weedle", "staryu", "psyduck") ~ "common",
species == "eevee" ~ "less_common",
TRUE ~ "no"
)
)
?case_when
pokedex <- readr::read_csv("data/pokedex_simple.csv")
glimpse(pokedex)  # let's inspect its contents
pokemon_join <- dplyr::left_join(
x = pokemon,  # to this table...
y = pokedex,   # ...join this table
by = "species"  # on this key
)
pokemon <- read_csv(file = "data/pokemon_go_captures.csv")
pokemon_select <- select(pokemon, -height_bin, -weight_bin)
pokemon_filter <- filter(pokemon_select, weight_kg > 15)
pokemon_mutate <- mutate(pokemon_filter, organism = "pokemon")
pokemon_piped <- readr::read_csv(file = "data/pokemon_go_captures.csv") %>%
dplyr::select(-height_bin, -weight_bin) %>%
dplyr::filter(weight_kg > 15) %>%
dplyr::mutate(organism = "pokemon")
tibble::glimpse(pokemon_piped)
#
# Did you notice something? We didn’t have to keep calling the dataframe object
# in each function call. For example, we used dplyr::filter(weight_kg > 15) rather than
# dplyr::filter(pokemon, weight_kg > 15) because the data argument was piped in. The
# functions mentioned above all accept the data that’s being passed into them
# because they’re part of the Tidyverse. (Note that this is not true for all
# functions, but we can talk about that later.)
#
# Here’s another simple example using the dataframe we built earlier:
#
my_df <- data.frame(
species = c("Pichu", "Pikachu", "Raichu"),
number = c(172, 25, 26),
location = c("Johto", "Kanto", "Kanto")
)
my_df %>%  # take the dataframe object...
dplyr::select(species, number) %>%   # ...then select these columns...
dplyr::filter(number %in% c(172, 26))  # ...then filter on these values
?group_by
?tally
?slice
pokemon %>%  # take the dataframe
dplyr::group_by(species) %>%   # group it by species
dplyr::tally() %>%   # tally up (count) the number of instances
dplyr::arrange(desc(n)) %>%  # arrange in descending order
dplyr::slice(1:5)  # and slice out the first five rows
?summarise
pokemon_join %>%  # take the dataframe
dplyr::group_by(type1) %>%   # group by variable
dplyr::summarise( # summarise it by...
count = n(),  # counting the number
mean_cp = round(mean(combat_power), 1)  # and taking a mean to 2 dp
) %>%
dplyr::arrange(desc(mean_cp))  # then organise in descending order of this column
pokemon_join %>%  # take the dataframe
dplyr::group_by(type1) %>%   # group by variable
dplyr::summarise( # summarise it by...
count = n(),  # counting the number
mean_cp = round(mean(combat_power), 2)  # and taking a mean to 2 dp
) %>%
dplyr::arrange(desc(mean_cp))  # then organise in descending order of this column
?round
round(3.56342, 3)
pokemon_join %>%  # take the dataframe
dplyr::group_by(type1) %>%   # group by variable
summarise( # summarise it by...
count = n(),  # counting the number
mean_cp = round(mean(combat_power), 2)  # and taking a mean to 1 dp
) %>%
dplyr::arrange(desc(mean_cp))  # then organise in descending order of this column
pokemon_join %>%  # take the dataframe
dplyr::group_by(type1) %>%   # group by variable
dplyr::summarise( # summarise it by...
count = n(),  # counting the number
mean_cp = round(mean(combat_power), 1)  # and taking a mean to 1 dp
) %>%
dplyr::arrange(desc(mean_cp))  # then organise in descending order of this column
pokemon_join %>%
dplyr::group_by(type1, weight_bin) %>%
dplyr::summarise(
mean_weight = mean(weight_kg),
count = n()
)
pokemon_join %>%  # take the dataframe
dplyr::group_by(type1) %>%   # group by variable
dplyr::summarise( # summarise it by...
count = n(),  # counting the number
mean_cp = mean(combat_power)  # and taking a mean to 1 dp ???
) %>%
dplyr::arrange(desc(mean_cp))  # then organise in descending order of this column
View(pokemon_join)
pokemon_join %>%  # take the dataframe
dplyr::group_by(type1) %>%   # group by variable
dplyr::summarise( # summarise it by...
count = n(),  # counting the number
mean_cp = round(mean(combat_power), 1)  # and taking a mean to 1 dp ???
) %>%
dplyr::arrange(desc(mean_cp))  # then organise in descending order of this column
pokemon_join %>%  # take the dataframe
dplyr::group_by(type1) %>%   # group by variable
dplyr::summarise( # summarise it by...
count = n(),  # counting the number
mean_cp = round(mean(combat_power), 0)  # and taking a mean to nearest whole number
) %>%
dplyr::arrange(desc(mean_cp))  # then organise in descending order of this column
pokemon %>%
ggplot2::ggplot() +
ggplot2::geom_boxplot(aes(x = weight_bin, y = combat_power))
pokemon_join %>%
dplyr::filter(type1 %in% c("fire", "water", "grass")) %>%
ggplot2::ggplot() +
ggplot2::geom_violin(aes(x = type1, y = combat_power)) +
theme_bw() +
labs(
title = "CP by type",
x = "Primary type",
y = "Combat power"
)
?labs
pokemon_join %>%
dplyr::filter(type1 %in% c("fire", "water", "grass")) %>%
ggplot2::ggplot() +
ggplot2::geom_violin(aes(x = type1, y = combat_power)) +
ggplot2::theme_bw() +
ggplot2::labs(
title = "CP by type",
x = "Primary type",
y = "Combat power"
)
#load required packages, note no quotes
library(tidyverse)
#to find out more about a function simply type ?function_name, eg
?read_csv
#or explicitly
?readr::read_csv
#read in data
pokemon <- readr::read_csv(file = "data/pokemon_go_captures.csv")
#read in data and asign to the newly created object 'pokemon'
pokemon <- readr::read_csv(file = "data/pokemon_go_captures.csv")
#data inspection
tibble::glimpse(pokemon)
#print to console
print(pokemon)
#view data
View(pokemon) # note the capital 'V'
#summary {base} stats
base::summary(pokemon)
#dplyr::select
# save as an object for later
pokemon_hp <- dplyr::select(
pokemon,  # the first argument is always the data
hit_points,  # the other arguments are column names you want to keep
species
)
print(pokemon_hp)
#select by dropping columns
select(
pokemon,  # data frame first
-hit_points, -combat_power, -fast_attack, -weight_bin  # columns to drop
)
#select columns with similar names
select(pokemon, starts_with("weight"))
select(pokemon, contains("bin"))
#see
?dplyr::select_helpers
#filter on a single species
dplyr::filter(pokemon, species == "jigglypuff")
#now everything except for one species
dply::filter(pokemon, species != "pidgey")  # not equal to
#filter on three species
dplyr::filter(
pokemon,
species %in% c("staryu", "psyduck", "charmander")
)
#we can work with numbers too
dplyr::filter(
pokemon,
combat_power > 900 & hit_points < 100  # two conditions
)  # note the '&'
#dplyr::mutate
# we're going to subset by columns first
pokemon_power_hp <- select(  # create new object by subsetting our data set
pokemon,  # data
species, combat_power, hit_points  # columns to keep
)
# now to mutate with some extra information
mutate(
pokemon_power_hp,  # our new, subsetted data frame
power_index = combat_power * hit_points,  # new column from old ones
caught = 1,  # new column will fill entirely with number
area = "kanto"  # will fill entirely with this text
)
# So we have a column caught filled for every row with 1 and and a
# column filled with  kanto for every row. R ‘recycles’ whatever you
# put there for each row. For example, if you gave the argument a
# vector of three numbers, e.g. caught = c(1:3), then the row 1 would
# get 1, row 2 would get 2, row 3 would get 3 and it would cycle back
# to 1 for row 4, and so on.
#
# You can mutate a little more easily with an if_else() statement:
dplyr::mutate(
pokemon_hp,
common = if_else(
condition = species %in% c(  # if this condition is met...
"pidgey", "rattata", "drowzee",
"spearow", "magikarp", "weedle",
"staryu", "psyduck", "eevee"
),
true = "yes",  # ...fill column with this string
false = "no"  # ...otherwise fill it with this string
)
)
dplyr::mutate(
pokemon_hp,  # data
common = dplyr::case_when(
species %in% c("pidgey", "rattata", "drowzee") ~ "very_common",
species == "spearow" ~ "pretty_common",
species %in% c("magikarp", "weedle", "staryu", "psyduck") ~ "common",
species == "eevee" ~ "less_common",
TRUE ~ "no" #else = "no"
)
)
#dplyr::arrange
dplyr::arrange(
pokemon,  # again, data first
height_m  # column to order by
)
#And in reverse order (tallest first):
dplyr::arrange(pokemon, desc(height_m))  # descending
pokedex <- readr::read_csv("data/pokedex_simple.csv")
tibble::glimpse(pokedex)  # let's inspect its contents
pokemon_join <- dplyr::left_join(
x = pokemon,  # to this table...
y = pokedex,   # ...join this table
by = "species"  # on this key
)
tibble::glimpse(pokemon_join)
pokemon <- read_csv(file = "data/pokemon_go_captures.csv")
pokemon_select <- select(pokemon, -height_bin, -weight_bin)
pokemon_filter <- filter(pokemon_select, weight_kg > 15)
pokemon_mutate <- mutate(pokemon_filter, organism = "pokemon")
pokemon_piped <- readr::read_csv(file = "data/pokemon_go_captures.csv") %>%
dplyr::select(-height_bin, -weight_bin) %>%
dplyr::filter(weight_kg > 15) %>%
dplyr::mutate(organism = "pokemon")
tibble::glimpse(pokemon_piped)
#
# Did you notice something? We didn’t have to keep calling the dataframe object
# in each function call. For example, we used dplyr::filter(weight_kg > 15) rather than
# dplyr::filter(pokemon, weight_kg > 15) because the data argument was piped in. The
# functions mentioned above all accept the data that’s being passed into them
# because they’re part of the Tidyverse. (Note that this is not true for all
# functions, but we can talk about that later.)
#
# Here’s another simple example using a datafram that we built ourselves:
#
my_df <- data.frame(
species = c("Pichu", "Pikachu", "Raichu"),
number = c(172, 25, 26),
location = c("Johto", "Kanto", "Kanto")
)
my_df %>%  # take the dataframe object...
dplyr::select(species, number) %>%   # ...then select these columns...
dplyr::filter(number %in% c(172, 26))  # ...then filter on these values
pokemon %>%  # take the dataframe
dplyr::group_by(species) %>%   # group it by species
dplyr::tally() %>%   # tally up (count) the number of instances
dplyr::arrange(desc(n)) %>%  # arrange in descending order
dplyr::slice(1:5)  # and slice out the first five rows
pokemon_join %>%  # take the dataframe
dplyr::group_by(type1) %>%   # group by variable
dplyr::summarise( # summarise it by...
count = n(),  # counting the number
mean_cp = round(mean(combat_power), 0)  # and taking a mean to nearest whole number
) %>%
dplyr::arrange(desc(mean_cp))  # then organise in descending order of this column
pokemon_join %>%
dplyr::group_by(type1, weight_bin) %>%
dplyr::summarise(
mean_weight = mean(weight_kg),
count = n()
)
Plot the data
pokemon %>%
ggplot2::ggplot() +
ggplot2::geom_boxplot(aes(x = weight_bin, y = combat_power))
pokemon_join %>%
dplyr::filter(type1 %in% c("fire", "water", "grass")) %>%
ggplot2::ggplot() +
ggplot2::geom_violin(aes(x = type1, y = combat_power)) +
ggplot2::theme_bw() +
ggplot2::labs(
title = "CP by type",
x = "Primary type",
y = "Combat power"
)
pokemon_join %>%
dplyr::filter(type1 %in% c("fire", "water", "grass")) %>%
ggplot2::ggplot() +
ggplot2::geom_point(aes(x = pokedex_number, y = height_m, colour = type1))
library(tidyverse)
pokemon <- readr::read_csv(file = "data/pokemon_go_captures.csv")
tibble::glimpse(pokemon)
print(pokemon)
View(pokemon)
base::summary(pokemon)
pokemon_hp <- dplyr::select(
pokemon,  # the first argument is always the data
hit_points,  # the other arguments are column names you want to keep
species
)
print(pokemon_hp)
#select by dropping columns
select(
pokemon,  # data frame first
-hit_points, -combat_power, -fast_attack, -weight_bin  # columns to drop
)
#load required packages, note no quotes
library(tidyverse)
#tidyverse is a collection
.libPaths(c("C:/Program Files/R/R-3.4.3/library","P:/My Documents/R/Win-Library/3.4"))
library(tidyverse)
?read_csv
pokemon <- readr::read_csv(file = "data/pokemon_go_captures.csv")
View(pokemon)
tibble::glimpse(pokemon)
#print to console
print(pokemon)
View(pokemon) # n
#summary {base} stats
base::summary(pokemon)
#dplyr::select
# save as an object for later
pokemon_hp <- dplyr::select(
pokemon,  # the first argument is always the data
hit_points,  # the other arguments are column names you want to keep
species
)
print(pokemon_hp)
select(
pokemon,  # data frame first
-hit_points, -combat_power, -fast_attack, -weight_bin  # columns to drop
)
#select columns with similar names
select(pokemon, starts_with("weight"))
select(pokemon, contains("bin"))
#filter on a single species
dplyr::filter(pokemon, species == "jigglypuff")
#now everything except for one species
dply::filter(pokemon, species != "pidgey")  # not equal to
#filter on three species
dplyr::filter(
pokemon,
species %in% c("staryu", "psyduck", "charmander")
)
#filter on a single species
dplyr::filter(pokemon, species == "jigglypuff")
dply::filter(pokemon, species != "pidgey")  # not equal to
dplyr::filter(pokemon, species != "pidgey")  # not equal to
dplyr::filter(
pokemon,
species %in% c("staryu", "psyduck", "charmander")
)
#load required packages, note no quotes
library(tidyverse)
#to find out more about a function simply type ?function_name, eg
?read_csv
#or explicitly
?readr::read_csv
#or explicitly
?readr::read_csv
#to find out more about a function simply type ?function_name, eg
?read_csv
#or explicitly
?readr::read_csv
#read in data and asign to the newly created object 'pokemon'
pokemon <- readr::read_csv(file = "data/pokemon_go_captures.csv")
#data inspection
tibble::glimpse(pokemon)
#print to console
print(pokemon)
?print
#print to console
base::print(pokemon)
?View
#view data
utils::View(pokemon) # note the capital 'V'
#view data
utils::View(pokemon) # note the capital 'V'
#view data
View(pokemon) # note the capital 'V'
utils::View(pokemon)
#summary {base} stats
base::summary(pokemon)
#dplyr::select
# save as an object for later
pokemon_hp <- dplyr::select(
pokemon,  # the first argument is always the data
hit_points,  # the other arguments are column names you want to keep
species
)
print(pokemon_hp)
#select by dropping columns
dplyr::select(
pokemon,  # data frame first
-hit_points, -combat_power, -fast_attack, -weight_bin  # columns to drop
)
#select columns with similar names
dplyr::select(pokemon, starts_with("weight"))
dplyr::select(pokemon, contains("bin"))
#see
?dplyr::select_helpers
#filter on a single species
dplyr::filter(pokemon, species == "jigglypuff")
#now everything except for one species
dply::filter(pokemon, species != "pidgey")  # not equal to
#now everything except for one species
dplyr::filter(pokemon, species != "pidgey")  # not equal to
#filter on three species
dplyr::filter(
pokemon,
species %in% c("staryu", "psyduck", "charmander")
)
#we can work with numbers too
dplyr::filter(
pokemon,
combat_power > 900 & hit_points < 100  # two conditions
)  # note the '&'
?select
#load required packages, note no quotes
library(tidyverse)
.libPaths(c("C:/Program Files/R/R-3.4.3/library","P:/My Documents/R/Win-Library/3.4"))
library(tidyverse)
#read in data and asign to the newly created object 'pokemon'
pokemon <- readr::read_csv(file = "data/pokemon_go_captures.csv")
pokemon <- readr::read_csv(file = "data/pokemon_go_captures.csv")
pokemon <- readr::read_csv(file = "data/pokemon_go_captures.csv")
base::summary(pokemon)
View(pokemon)
